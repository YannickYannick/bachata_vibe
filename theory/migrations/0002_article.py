# Generated by Django 4.2.7 on 2025-08-13 15:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("theory", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=200, unique=True, verbose_name="Slug"
                    ),
                ),
                ("excerpt", models.TextField(blank=True, verbose_name="Extrait")),
                ("content", models.TextField(verbose_name="Contenu")),
                (
                    "author_name",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Nom de l'auteur"
                    ),
                ),
                (
                    "published_date",
                    models.DateTimeField(verbose_name="Date de publication"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="Publié"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Mis en avant"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("technique", "Technique"),
                            ("histoire", "Histoire"),
                            ("culture", "Culture"),
                            ("musique", "Musique"),
                            ("style", "Style"),
                            ("anatomie", "Anatomie et mouvement"),
                            ("psychologie", "Psychologie de la danse"),
                            ("pedagogie", "Pédagogie"),
                            ("autre", "Autre"),
                        ],
                        default="technique",
                        max_length=20,
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                        ],
                        default="beginner",
                        max_length=20,
                        verbose_name="Niveau de difficulté",
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="theory/images/",
                        verbose_name="Image principale",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Galerie d'images"
                    ),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, verbose_name="URL de la vidéo"),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="Tags"),
                ),
                (
                    "resources",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Ressources"
                    ),
                ),
                (
                    "bibliography",
                    models.TextField(blank=True, verbose_name="Bibliographie"),
                ),
                (
                    "reading_time",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                        verbose_name="Temps de lecture (minutes)",
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "likes_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de likes"
                    ),
                ),
                (
                    "shares_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de partages"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="Approuvé"),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approuvé le"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_articles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authored_articles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Auteur",
                    ),
                ),
                (
                    "related_articles",
                    models.ManyToManyField(
                        blank=True, to="theory.article", verbose_name="Articles liés"
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
                "ordering": ["-published_date"],
                "indexes": [
                    models.Index(
                        fields=["is_published", "is_featured"],
                        name="theory_arti_is_publ_7e68ff_idx",
                    ),
                    models.Index(
                        fields=["category", "difficulty"],
                        name="theory_arti_categor_471056_idx",
                    ),
                    models.Index(
                        fields=["author", "is_published"],
                        name="theory_arti_author__49da8c_idx",
                    ),
                ],
            },
        ),
    ]
