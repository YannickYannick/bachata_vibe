# Generated by Django 4.2.7 on 2025-08-13 10:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TheoryCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#8B5CF6", max_length=7, verbose_name="Couleur"
                    ),
                ),
                (
                    "icon",
                    models.CharField(blank=True, max_length=50, verbose_name="Icône"),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Ordre d'affichage"
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie de théorie",
                "verbose_name_plural": "Catégories de théorie",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TheoryCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=200, unique=True, verbose_name="Slug"
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "short_description",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Description courte"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Brouillon"),
                            ("pending", "En attente de validation"),
                            ("published", "Publié"),
                            ("archived", "Archivé"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approuvé le"
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="beginner",
                        max_length=20,
                        verbose_name="Niveau de difficulté",
                    ),
                ),
                ("content", models.TextField(verbose_name="Contenu principal")),
                (
                    "learning_objectives",
                    models.JSONField(
                        blank=True,
                        default=list,
                        verbose_name="Objectifs d'apprentissage",
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(blank=True, verbose_name="Prérequis"),
                ),
                (
                    "main_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="theory/images/",
                        verbose_name="Image principale",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, verbose_name="URL de la vidéo"),
                ),
                (
                    "audio_url",
                    models.URLField(blank=True, verbose_name="URL de l'audio"),
                ),
                (
                    "attachments",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Fichiers joints"
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        default=30,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="Durée estimée (minutes)",
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "likes_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de likes"
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note moyenne",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="Tags"),
                ),
                (
                    "keywords",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Mots-clés"
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Publié le"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_theory_courses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theory_courses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Auteur",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="theory.theorycategory",
                        verbose_name="Catégorie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cours de théorie",
                "verbose_name_plural": "Cours de théorie",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TheoryLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(blank=True, max_length=200, verbose_name="Slug"),
                ),
                ("content", models.TextField(verbose_name="Contenu")),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Ordre dans le cours"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(default=True, verbose_name="Leçon obligatoire"),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, verbose_name="URL de la vidéo"),
                ),
                (
                    "audio_url",
                    models.URLField(blank=True, verbose_name="URL de l'audio"),
                ),
                (
                    "images",
                    models.JSONField(blank=True, default=list, verbose_name="Images"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                        verbose_name="Durée (minutes)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="theory.theorycourse",
                        verbose_name="Cours",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leçon de théorie",
                "verbose_name_plural": "Leçons de théorie",
                "ordering": ["course", "order"],
                "unique_together": {("course", "order")},
            },
        ),
        migrations.CreateModel(
            name="TheoryQuiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        default=70,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Score de réussite (%)",
                    ),
                ),
                (
                    "time_limit_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name="Limite de temps (minutes)",
                    ),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Nombre maximum de tentatives",
                    ),
                ),
                ("questions", models.JSONField(default=list, verbose_name="Questions")),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quizzes",
                        to="theory.theorycourse",
                        verbose_name="Cours",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quiz de théorie",
                "verbose_name_plural": "Quiz de théorie",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TheoryProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "completed_lessons",
                    models.JSONField(default=list, verbose_name="Leçons terminées"),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Pourcentage de progression",
                    ),
                ),
                (
                    "quiz_attempts",
                    models.JSONField(default=dict, verbose_name="Tentatives de quiz"),
                ),
                (
                    "best_quiz_score",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Meilleur score de quiz",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Commencer le"
                    ),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière consultation"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Terminé le"
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="theory.theorycourse",
                        verbose_name="Cours",
                    ),
                ),
                (
                    "current_lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="theory.theorylesson",
                        verbose_name="Leçon actuelle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theory_progress",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Progression théorique",
                "verbose_name_plural": "Progressions théoriques",
                "ordering": ["-last_accessed"],
                "unique_together": {("user", "course")},
            },
        ),
        migrations.AddIndex(
            model_name="theorycourse",
            index=models.Index(
                fields=["status", "published_at"], name="theory_theo_status_9cdd4e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="theorycourse",
            index=models.Index(
                fields=["author", "status"], name="theory_theo_author__390026_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="theorycourse",
            index=models.Index(
                fields=["category", "difficulty"], name="theory_theo_categor_127708_idx"
            ),
        ),
    ]
