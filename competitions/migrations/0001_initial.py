# Generated by Django 4.2.7 on 2025-08-13 10:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=200, unique=True, verbose_name="Slug"
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "short_description",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Description courte"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Brouillon"),
                            ("pending", "En attente de validation"),
                            ("approved", "Approuvé"),
                            ("registration_open", "Inscriptions ouvertes"),
                            ("registration_closed", "Inscriptions fermées"),
                            ("ongoing", "En cours"),
                            ("completed", "Terminé"),
                            ("cancelled", "Annulé"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approuvé le"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("solo", "Solo"),
                            ("couple", "Couple"),
                            ("group", "Groupe"),
                            ("professional", "Professionnel"),
                            ("amateur", "Amateur"),
                            ("senior", "Senior"),
                            ("youth", "Jeunesse"),
                        ],
                        max_length=20,
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("professional", "Professionnel"),
                        ],
                        max_length=20,
                        verbose_name="Niveau requis",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(verbose_name="Date et heure de début"),
                ),
                ("end_date", models.DateTimeField(verbose_name="Date et heure de fin")),
                (
                    "registration_deadline",
                    models.DateTimeField(verbose_name="Date limite d'inscription"),
                ),
                (
                    "rehearsal_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de répétition"
                    ),
                ),
                ("location", models.CharField(max_length=200, verbose_name="Lieu")),
                (
                    "address",
                    models.TextField(blank=True, verbose_name="Adresse complète"),
                ),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="Code postal"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="France", max_length=100, verbose_name="Pays"
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Nombre maximum de participants",
                    ),
                ),
                (
                    "current_participants",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Participants actuels"
                    ),
                ),
                (
                    "min_participants",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Nombre minimum de participants",
                    ),
                ),
                (
                    "registration_fee",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        verbose_name="Frais d'inscription",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR", max_length=3, verbose_name="Devise"
                    ),
                ),
                ("is_free", models.BooleanField(default=False, verbose_name="Gratuit")),
                ("rules", models.TextField(verbose_name="Règlement")),
                (
                    "judging_criteria",
                    models.TextField(verbose_name="Critères de jugement"),
                ),
                (
                    "time_limit",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Limite de temps (minutes)",
                    ),
                ),
                (
                    "prizes",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Prix et récompenses"
                    ),
                ),
                (
                    "prize_pool",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=10,
                        verbose_name="Dotation totale",
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="competitions/images/",
                        verbose_name="Image principale",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Galerie d'images"
                    ),
                ),
                (
                    "promotional_video",
                    models.URLField(blank=True, verbose_name="Vidéo promotionnelle"),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="Tags"),
                ),
                ("website_url", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "social_media",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Réseaux sociaux"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_competitions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_competitions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créateur",
                    ),
                ),
                (
                    "jury_members",
                    models.ManyToManyField(
                        blank=True,
                        related_name="jury_competitions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Membres du jury",
                    ),
                ),
                (
                    "organizers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="organized_competitions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Organisateurs",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compétition",
                "verbose_name_plural": "Compétitions",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="CompetitionEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("confirmed", "Confirmé"),
                            ("cancelled", "Annulé"),
                            ("completed", "Terminé"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "enrolled_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Inscrit le"),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("paid", "Payé"),
                            ("failed", "Échoué"),
                            ("refunded", "Remboursé"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Statut du paiement",
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Méthode de paiement"
                    ),
                ),
                (
                    "partner_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Nom du partenaire"
                    ),
                ),
                (
                    "dance_style",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Style de danse"
                    ),
                ),
                (
                    "music_choice",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Choix musical"
                    ),
                ),
                (
                    "special_requests",
                    models.TextField(blank=True, verbose_name="Demandes spéciales"),
                ),
                (
                    "final_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Score final",
                    ),
                ),
                (
                    "ranking",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Classement"
                    ),
                ),
                (
                    "awards",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Récompenses obtenues"
                    ),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="competitions.competition",
                        verbose_name="Compétition",
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="competition_enrollments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Participant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inscription à la compétition",
                "verbose_name_plural": "Inscriptions aux compétitions",
                "ordering": ["-enrolled_at"],
                "unique_together": {("competition", "participant")},
            },
        ),
        migrations.AddIndex(
            model_name="competition",
            index=models.Index(
                fields=["status", "start_date"], name="competition_status_14ce74_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="competition",
            index=models.Index(
                fields=["creator", "status"], name="competition_creator_4f7c67_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="competition",
            index=models.Index(
                fields=["city", "start_date"], name="competition_city_73be95_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="competition",
            index=models.Index(
                fields=["category", "difficulty"], name="competition_categor_88250d_idx"
            ),
        ),
    ]
