#!/usr/bin/env python3
"""
Script de d√©ploiement pour BachataSite
Automatise le processus de build et d√©ploiement
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, cwd=None, check=True):
    """Ex√©cute une commande shell"""
    print(f"üîÑ Ex√©cution: {command}")
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd,
            check=check,
            capture_output=True,
            text=True
        )
        if result.stdout:
            print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de: {command}")
        print(f"Sortie d'erreur: {e.stderr}")
        if check:
            sys.exit(1)
        return e

def check_requirements():
    """V√©rifie que tous les pr√©requis sont install√©s"""
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rifier Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # V√©rifier Node.js
    try:
        node_result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        print(f"‚úÖ Node.js {node_result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Node.js non trouv√©")
        sys.exit(1)
    
    # V√©rifier npm
    try:
        npm_result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
        print(f"‚úÖ npm {npm_result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå npm non trouv√©")
        sys.exit(1)

def setup_backend():
    """Configure le backend Django"""
    print("\nüêç Configuration du backend Django...")
    
    # Cr√©er l'environnement virtuel s'il n'existe pas
    if not os.path.exists('venv'):
        print("üì¶ Cr√©ation de l'environnement virtuel...")
        run_command('python -m venv venv')
    
    # Activer l'environnement virtuel
    if os.name == 'nt':  # Windows
        activate_script = 'venv\\Scripts\\activate'
    else:  # Unix/Linux/Mac
        activate_script = 'source venv/bin/activate'
    
    # Installer les d√©pendances
    print("üì¶ Installation des d√©pendances Python...")
    run_command(f'{activate_script} && pip install -r requirements.txt')
    
    # V√©rifier si .env existe
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  Fichier .env non trouv√©. Cr√©ation d'un exemple...")
        if os.path.exists('.env.example'):
            shutil.copy('.env.example', '.env')
            print("üìù Veuillez configurer le fichier .env avec vos param√®tres")
        else:
            print("‚ùå Fichier .env.example non trouv√©")
    
    # Migrations
    print("üóÑÔ∏è  Ex√©cution des migrations...")
    run_command(f'{activate_script} && python manage.py makemigrations')
    run_command(f'{activate_script} && python manage.py migrate')
    
    # Collecter les fichiers statiques
    print("üìÅ Collecte des fichiers statiques...")
    run_command(f'{activate_script} && python manage.py collectstatic --noinput')

def setup_frontend():
    """Configure le frontend React"""
    print("\n‚öõÔ∏è  Configuration du frontend React...")
    
    # Aller dans le dossier frontend
    frontend_dir = Path('frontend')
    if not frontend_dir.exists():
        print("‚ùå Dossier frontend non trouv√©")
        return
    
    # Installer les d√©pendances
    print("üì¶ Installation des d√©pendances Node.js...")
    run_command('npm install', cwd=frontend_dir)
    
    # Build de production
    print("üèóÔ∏è  Build de production...")
    run_command('npm run build', cwd=frontend_dir)

def create_superuser():
    """Cr√©e un superutilisateur Django"""
    print("\nüë§ Cr√©ation d'un superutilisateur...")
    
    if os.name == 'nt':  # Windows
        activate_script = 'venv\\Scripts\\activate'
    else:  # Unix/Linux/Mac
        activate_script = 'source venv/bin/activate'
    
    try:
        run_command(f'{activate_script} && python manage.py createsuperuser', check=False)
        print("‚úÖ Superutilisateur cr√©√© ou d√©j√† existant")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation du superutilisateur: {e}")

def run_tests():
    """Ex√©cute les tests"""
    print("\nüß™ Ex√©cution des tests...")
    
    if os.name == 'nt':  # Windows
        activate_script = 'venv\\Scripts\\activate'
    else:  # Unix/Linux/Mac
        activate_script = 'source venv/bin/activate'
    
    # Tests backend
    print("üêç Tests Django...")
    run_command(f'{activate_script} && python manage.py test', check=False)
    
    # Tests frontend
    print("‚öõÔ∏è  Tests React...")
    frontend_dir = Path('frontend')
    if frontend_dir.exists():
        run_command('npm test -- --watchAll=false', cwd=frontend_dir, check=False)

def start_development_server():
    """D√©marre le serveur de d√©veloppement"""
    print("\nüöÄ D√©marrage du serveur de d√©veloppement...")
    
    if os.name == 'nt':  # Windows
        activate_script = 'venv\\Scripts\\activate'
    else:  # Unix/Linux/Mac
        activate_script = 'source venv/bin/activate'
    
    print("üåê Serveur Django d√©marr√© sur http://localhost:8000")
    print("‚öõÔ∏è  Frontend React disponible sur http://localhost:3000")
    print("üîê Interface d'administration: http://localhost:8000/admin")
    print("\nüì± Appuyez sur Ctrl+C pour arr√™ter le serveur")
    
    try:
        run_command(f'{activate_script} && python manage.py runserver')
    except KeyboardInterrupt:
        print("\nüëã Arr√™t du serveur")

def main():
    """Fonction principale"""
    print("üéØ Script de d√©ploiement BachataSite")
    print("=" * 50)
    
    # V√©rifier les pr√©requis
    check_requirements()
    
    # Configuration du backend
    setup_backend()
    
    # Configuration du frontend
    setup_frontend()
    
    # Cr√©er un superutilisateur
    create_superuser()
    
    # Ex√©cuter les tests
    run_tests()
    
    print("\n‚úÖ Configuration termin√©e avec succ√®s!")
    print("\nüéâ Votre site de bachata est pr√™t!")
    
    # Demander si l'utilisateur veut d√©marrer le serveur
    response = input("\nüöÄ Voulez-vous d√©marrer le serveur de d√©veloppement? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        start_development_server()

if __name__ == '__main__':
    main()









