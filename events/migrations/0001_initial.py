# Generated by Django 4.2.7 on 2025-08-30 10:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "slug",
                    models.SlugField(max_length=100, unique=True, verbose_name="Slug"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#8B5CF6", max_length=7, verbose_name="Couleur (hex)"
                    ),
                ),
                (
                    "icon",
                    models.CharField(blank=True, max_length=50, verbose_name="Icône"),
                ),
            ],
            options={
                "verbose_name": "Catégorie d'événement",
                "verbose_name_plural": "Catégories d'événements",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(max_length=200, unique=True, verbose_name="Slug"),
                ),
                ("description", models.TextField(verbose_name="Description courte")),
                (
                    "long_description",
                    models.TextField(verbose_name="Description détaillée"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Brouillon"),
                            ("published", "Publié"),
                            ("cancelled", "Annulé"),
                            ("completed", "Terminé"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(default=False, verbose_name="En vedette"),
                ),
                (
                    "start_date",
                    models.DateTimeField(verbose_name="Date et heure de début"),
                ),
                ("end_date", models.DateTimeField(verbose_name="Date et heure de fin")),
                (
                    "registration_deadline",
                    models.DateTimeField(verbose_name="Date limite d'inscription"),
                ),
                ("location", models.CharField(max_length=200, verbose_name="Lieu")),
                ("address", models.TextField(verbose_name="Adresse complète")),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                (
                    "postal_code",
                    models.CharField(max_length=10, verbose_name="Code postal"),
                ),
                (
                    "country",
                    models.CharField(
                        default="France", max_length=100, verbose_name="Pays"
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(verbose_name="Capacité maximale"),
                ),
                (
                    "min_participants",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Participants minimum"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Prix"
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR", max_length=3, verbose_name="Devise"
                    ),
                ),
                (
                    "early_bird_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Prix early bird",
                    ),
                ),
                (
                    "early_bird_deadline",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date limite early bird"
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("all_levels", "Tous niveaux"),
                        ],
                        default="all_levels",
                        max_length=20,
                        verbose_name="Niveau",
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(blank=True, verbose_name="Prérequis"),
                ),
                (
                    "instructor",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Instructeur"
                    ),
                ),
                (
                    "instructor_bio",
                    models.TextField(
                        blank=True, verbose_name="Biographie de l'instructeur"
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        upload_to="events/main_images/", verbose_name="Image principale"
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Galerie d'images"
                    ),
                ),
                (
                    "highlights",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Points forts"
                    ),
                ),
                (
                    "schedule",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Programme détaillé"
                    ),
                ),
                (
                    "materials_needed",
                    models.TextField(blank=True, verbose_name="Matériel nécessaire"),
                ),
                ("website", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "instagram",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Compte Instagram"
                    ),
                ),
                (
                    "facebook",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Page Facebook"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventcategory",
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organized_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Organisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Événement",
                "verbose_name_plural": "Événements",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="EventWaitlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date d'ajout"
                    ),
                ),
                (
                    "notified",
                    models.BooleanField(default=False, verbose_name="Notifié"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waitlist",
                        to="events.event",
                        verbose_name="Événement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_waitlist",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Liste d'attente",
                "verbose_name_plural": "Listes d'attente",
                "ordering": ["joined_at"],
                "unique_together": {("event", "user")},
            },
        ),
        migrations.CreateModel(
            name="EventReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note (1-5)",
                    ),
                ),
                ("comment", models.TextField(verbose_name="Commentaire")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="events.event",
                        verbose_name="Événement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_reviews",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avis d'événement",
                "verbose_name_plural": "Avis d'événements",
                "ordering": ["-created_at"],
                "unique_together": {("event", "user")},
            },
        ),
        migrations.CreateModel(
            name="EventEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("confirmed", "Confirmé"),
                            ("cancelled", "Annulé"),
                            ("waitlist", "Liste d'attente"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("paid", "Payé"),
                            ("failed", "Échoué"),
                            ("refunded", "Remboursé"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Statut du paiement",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date d'inscription"
                    ),
                ),
                (
                    "price_paid",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Prix payé"
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR", max_length=3, verbose_name="Devise"
                    ),
                ),
                (
                    "special_requests",
                    models.TextField(blank=True, verbose_name="Demandes spéciales"),
                ),
                (
                    "dietary_restrictions",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Restrictions alimentaires",
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Contact d'urgence"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="events.event",
                        verbose_name="Événement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_enrollments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inscription à un événement",
                "verbose_name_plural": "Inscriptions aux événements",
                "ordering": ["-enrollment_date"],
                "indexes": [
                    models.Index(
                        fields=["status", "enrollment_date"],
                        name="events_even_status_f07b77_idx",
                    ),
                    models.Index(
                        fields=["user", "status"], name="events_even_user_id_9881ab_idx"
                    ),
                    models.Index(
                        fields=["event", "status"],
                        name="events_even_event_i_7a31ab_idx",
                    ),
                ],
                "unique_together": {("event", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["status", "start_date"], name="events_even_status_dfba18_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["category", "featured"], name="events_even_categor_f0fabf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["city", "start_date"], name="events_even_city_662f49_idx"
            ),
        ),
    ]
