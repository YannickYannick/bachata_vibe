# Generated by Django 4.2.7 on 2025-08-13 10:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ArtistProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "artist_name",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Nom d'artiste"
                    ),
                ),
                ("bio", models.TextField(verbose_name="Biographie")),
                (
                    "short_bio",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Biographie courte"
                    ),
                ),
                (
                    "specialties",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Spécialités"
                    ),
                ),
                (
                    "dance_styles",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Styles de danse"
                    ),
                ),
                (
                    "teaching_experience",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Années d'expérience d'enseignement"
                    ),
                ),
                (
                    "performance_experience",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Années d'expérience de performance"
                    ),
                ),
                (
                    "qualifications",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Qualifications"
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Certifications"
                    ),
                ),
                (
                    "awards",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Prix et récompenses"
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="artists/profile_images/",
                        verbose_name="Image de profil",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Galerie d'images"
                    ),
                ),
                (
                    "demo_video",
                    models.URLField(blank=True, verbose_name="Vidéo de démonstration"),
                ),
                ("website", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "instagram",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Instagram"
                    ),
                ),
                (
                    "facebook",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Facebook"
                    ),
                ),
                (
                    "youtube",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="YouTube"
                    ),
                ),
                (
                    "tiktok",
                    models.CharField(blank=True, max_length=100, verbose_name="TikTok"),
                ),
                (
                    "is_available_for_teaching",
                    models.BooleanField(
                        default=True, verbose_name="Disponible pour l'enseignement"
                    ),
                ),
                (
                    "is_available_for_performances",
                    models.BooleanField(
                        default=True, verbose_name="Disponible pour les performances"
                    ),
                ),
                (
                    "is_available_for_workshops",
                    models.BooleanField(
                        default=True, verbose_name="Disponible pour les ateliers"
                    ),
                ),
                (
                    "is_available_for_private_lessons",
                    models.BooleanField(
                        default=True, verbose_name="Disponible pour les cours privés"
                    ),
                ),
                (
                    "teaching_rate_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Tarif d'enseignement par heure",
                    ),
                ),
                (
                    "performance_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Tarif de performance",
                    ),
                ),
                (
                    "workshop_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Tarif d'atelier",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR", max_length=3, verbose_name="Devise"
                    ),
                ),
                (
                    "base_location",
                    models.CharField(max_length=200, verbose_name="Lieu de base"),
                ),
                (
                    "travel_radius",
                    models.PositiveIntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Rayon de déplacement (km)",
                    ),
                ),
                (
                    "willing_to_travel",
                    models.BooleanField(default=True, verbose_name="Prêt à voyager"),
                ),
                (
                    "languages",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Langues parlées"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, verbose_name="Artiste mis en avant"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Artiste vérifié"),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note moyenne",
                    ),
                ),
                (
                    "reviews_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre d'avis"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="artist_profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Profil d'artiste",
                "verbose_name_plural": "Profils d'artistes",
                "ordering": ["-rating", "-views_count"],
            },
        ),
        migrations.CreateModel(
            name="ArtistPortfolio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("performance", "Performance"),
                            ("choreography", "Chorégraphie"),
                            ("teaching", "Enseignement"),
                            ("competition", "Compétition"),
                            ("workshop", "Atelier"),
                            ("other", "Autre"),
                        ],
                        max_length=50,
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="artists/portfolio/images/",
                        verbose_name="Image principale",
                    ),
                ),
                (
                    "images",
                    models.JSONField(blank=True, default=list, verbose_name="Images"),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, verbose_name="URL de la vidéo"),
                ),
                ("date", models.DateField(verbose_name="Date")),
                (
                    "location",
                    models.CharField(blank=True, max_length=200, verbose_name="Lieu"),
                ),
                (
                    "collaborators",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Collaborateurs"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="Tags"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Mis en avant"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_items",
                        to="artists.artistprofile",
                        verbose_name="Artiste",
                    ),
                ),
            ],
            options={
                "verbose_name": "Portfolio d'artiste",
                "verbose_name_plural": "Portfolios d'artistes",
                "ordering": ["-date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ArtistAvailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Date de début")),
                ("end_date", models.DateField(verbose_name="Date de fin")),
                (
                    "availability_type",
                    models.CharField(
                        choices=[
                            ("teaching", "Enseignement"),
                            ("performance", "Performance"),
                            ("workshop", "Atelier"),
                            ("private_lesson", "Cours privé"),
                            ("consultation", "Consultation"),
                            ("other", "Autre"),
                        ],
                        max_length=50,
                        verbose_name="Type de disponibilité",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "is_available",
                    models.BooleanField(default=True, verbose_name="Disponible"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availabilities",
                        to="artists.artistprofile",
                        verbose_name="Artiste",
                    ),
                ),
            ],
            options={
                "verbose_name": "Disponibilité d'artiste",
                "verbose_name_plural": "Disponibilités d'artistes",
                "ordering": ["start_date"],
            },
        ),
        migrations.CreateModel(
            name="ArtistReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note globale (1-5)",
                    ),
                ),
                (
                    "teaching_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note enseignement (1-5)",
                    ),
                ),
                (
                    "performance_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note performance (1-5)",
                    ),
                ),
                (
                    "professionalism_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Note professionnalisme (1-5)",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Titre de l'avis"
                    ),
                ),
                ("comment", models.TextField(verbose_name="Commentaire")),
                (
                    "context",
                    models.CharField(
                        choices=[
                            ("course", "Cours"),
                            ("workshop", "Atelier"),
                            ("performance", "Performance"),
                            ("private_lesson", "Cours privé"),
                            ("festival", "Festival"),
                            ("other", "Autre"),
                        ],
                        max_length=50,
                        verbose_name="Contexte",
                    ),
                ),
                (
                    "event_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de l'événement"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Avis vérifié"),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(default=0, verbose_name="Votes utiles"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="artists.artistprofile",
                        verbose_name="Artiste",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="artist_reviews_given",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Évaluateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avis d'artiste",
                "verbose_name_plural": "Avis d'artistes",
                "ordering": ["-created_at"],
                "unique_together": {("artist", "reviewer")},
            },
        ),
        migrations.AddIndex(
            model_name="artistprofile",
            index=models.Index(
                fields=["is_featured", "is_verified"],
                name="artists_art_is_feat_33222e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="artistprofile",
            index=models.Index(
                fields=["base_location", "is_available_for_teaching"],
                name="artists_art_base_lo_885bcd_idx",
            ),
        ),
    ]
